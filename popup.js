// Generated by LiveScript 1.4.0
(function(){
  var getDb, getCollection, getVarsCollection, getListsCollection, setvar, getvar, clearvar, printvar, addtolist, getlist, clearlist, printlist, out$ = typeof exports != 'undefined' && exports || this;
  out$.getDb = getDb = memoizeSingleAsync(function(callback){
    return new minimongo.IndexedDb({
      namespace: 'autosurvey'
    }, callback);
  });
  out$.getCollection = getCollection = function(collection_name, callback){
    return getDb(function(db){
      var collection;
      collection = db.collections[collection_name];
      if (collection != null) {
        callback(collection);
        return;
      }
      return db.addCollection(collection_name, function(){
        return callback(db.collections[collection_name]);
      });
    });
  };
  out$.getVarsCollection = getVarsCollection = memoizeSingleAsync(function(callback){
    return getCollection('vars', callback);
  });
  out$.getListsCollection = getListsCollection = memoizeSingleAsync(function(callback){
    return getCollection('lists', callback);
  });
  out$.setvar = setvar = function(name, val, callback){
    return getVarsCollection(function(data){
      return data.upsert({
        _id: name,
        val: val
      }, function(result){
        if (callback != null) {
          return callback();
        }
      });
    });
  };
  out$.getvar = getvar = function(name, callback){
    return getVarsCollection(function(data){
      return data.findOne({
        _id: name
      }, function(result){
        if (result != null) {
          callback(result.val);
        } else {
          callback(null);
        }
      });
    });
  };
  out$.clearvar = clearvar = function(name, callback){
    return getVarsCollection(function(data){
      return data.remove(name, function(){
        if (callback != null) {
          return callback();
        }
      });
    });
  };
  out$.printvar = printvar = function(name){
    return getvar(name, function(result){
      return console.log(result);
    });
  };
  out$.addtolist = addtolist = function(name, val, callback){
    return getListsCollection(function(data){
      return data.upsert({
        name: name,
        val: val
      }, function(result){
        if (callback != null) {
          return callback();
        }
      });
    });
  };
  out$.getlist = getlist = function(name, callback){
    return getListsCollection(function(data){
      return data.find({
        name: name
      }).fetch(function(result){
        var x;
        return callback((function(){
          var i$, ref$, len$, results$ = [];
          for (i$ = 0, len$ = (ref$ = result).length; i$ < len$; ++i$) {
            x = ref$[i$];
            results$.push(x.val);
          }
          return results$;
        }()));
      });
    });
  };
  out$.clearlist = clearlist = function(name, callback){
    return getListsCollection(function(data){
      return data.find({
        name: name
      }).fetch(function(result){
        return async.eachSeries(result, function(item, ncallback){
          return data.remove(item['_id'], function(){
            return ncallback();
          });
        }, function(){
          if (callback != null) {
            return callback();
          }
        });
      });
    });
  };
  out$.printlist = printlist = function(name){
    return getlist(name, function(result){
      return console.log(result);
    });
  };
  $(document).ready(function(){
    return getvar('facebook_name', function(facebook_name){
      return getvar('facebook_link', function(facebook_link){
        return getvar('facebook_birthdate', function(facebook_birthdate){
          return getvar('facebook_occupation', function(facebook_occupation){
            $('#facebook_name').text(facebook_name);
            $('#facebook_link').text(facebook_link);
            $('#facebook_occupation').text(facebook_occupation);
            $('#facebook_birthdate').text(facebook_birthdate);
            return console.log('popup is getting rendered');
          });
        });
      });
    });
  });
}).call(this);
